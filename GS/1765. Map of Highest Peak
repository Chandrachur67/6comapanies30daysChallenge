class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m = isWater.size(), n = isWater[0].size();

        queue<pair<int, pair<int, int>>> q;
        vector<vector<int>> height(m, vector<int>(n, -1));

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(isWater[i][j] == 1) {
                    height[i][j] = 0;
                    q.push({0, {i, j}});
                }
            }
        }

        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        while(!q.empty()) {
            int currHeight = q.front().first;
            auto [ row, col ] = q.front().second;
            q.pop();

            for(int i = 0; i < 4; i++) {
                int newRow = row + delRow[i];
                int newCol = col + delCol[i];

                if (newRow >= 0 && newRow < m && 
                    newCol >= 0 && newCol < n) 
                {
                    if(height[newRow][newCol] == -1) {
                        height[newRow][newCol] = currHeight + 1;
                        q.push({currHeight + 1, {newRow, newCol}});
                    }
                }
            }
        }
        return height;
    }
};
